static String getType(List allAbi) {
    def type = 0
    if (allAbi.contains('x86') || allAbi.contains('x86_64')) {
        type = 1
    } else if (allAbi.contains('armeabi-v7a') || allAbi.contains('arm64-v8a')) {
        type = 2
    }
    return type == 1 ? 'x86' : type == 2 ? 'arm' : 'all'
}

ext {
    props = new Properties()
    if (project.hasProperty('configPath')) {
        props.load(new FileInputStream(configPath))
    } else if (project.file('local.properties').exists()) {
        props.load(new FileInputStream(project.file('local.properties')))
    }
    if (props['abis']) {
        props['abis'] = props['abis']?.split(',')?.toList()
    }
    project.hasProperty('buildApi') && (props['buildApi'] = buildApi.toInteger())
    project.hasProperty('mergeBuild') && (props['mergeBuild'] = mergeBuild)
    project.hasProperty('abis') && (props['abis'] = abis.split(',').toList())
    project.hasProperty('logLevel') && (props['logLevel'] = logLevel.toInteger())
    props['hasSign'] = props['storeFile']?.trim() && props['storePassword']?.trim() && props['keyAlias']?.trim() && props['keyPassword']?.trim()
    targetSdk = props['targetSdk'].toInteger()
    props['buildApi'] = props['buildApi']
    props['buildApi'] = props['buildApi'].toInteger()
    props['logLevel'] = props['logLevel'] ?: 2
    props['logLevel'] = props['logLevel'].toInteger()
    props['appType'] = getType(rootProject.props['abis'] ?: ['armeabi-v7a', 'x86', 'arm64-v8a', 'x86_64'])
    props['mergeBuild'] = props['mergeBuild'] ?: true
    props['mergeBuild'] = props['mergeBuild'].toBoolean()
    println props
}

buildscript {
    repositories {
        google()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.1.3'
    }
}

allprojects {
    repositories {
        google()
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}