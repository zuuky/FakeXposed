/*
 * Copyright (c) 2021 FakeXposed by sanfengAndroid.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

import java.nio.file.Paths

plugins {
    id 'com.android.application'
}
// Android NDK新版不包含Api 25,切换低版本NDK会引起不必要的兼容代码
def highHookModuleName = 'hookh'
def lowHookModuleName = 'hookl'
def hookModuleName = (rootProject.props['buildApi'] ?: rootProject.targetSdk) >= 24 ? highHookModuleName : lowHookModuleName
def mVersionCode = 2100
def mVersionName = "2.1"
def appType = rootProject.props['appType']
android {
    compileSdk rootProject.targetSdk
    if (rootProject.props['hasSign']) {
        signingConfigs {
            sign {
                storeFile file(rootProject.props['storeFile'])
                storePassword rootProject.props['storePassword']
                keyAlias rootProject.props['keyAlias']
                keyPassword rootProject.props['keyPassword']
            }
        }
    }
    defaultConfig {
        applicationId "com.sanfengandroid.datafilter"
        minSdkVersion 28
        targetSdkVersion rootProject.targetSdk
        versionCode mVersionCode
        versionName mVersionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        externalNativeBuild {
            cmake {
                version "3.18.1"
                cppFlags "-fvisibility=hidden -fvisibility-inlines-hidden -Os -fomit-frame-pointer -fno-rtti -fno-exceptions"
                cFlags "-fvisibility=hidden -fvisibility-inlines-hidden -Os -fomit-frame-pointer"
                abiFilters.addAll(rootProject.props['abis'] ?: ['armeabi-v7a', 'x86', 'arm64-v8a', 'x86_64'])
                arguments '-DANDROID_PLATFORM=' + (rootProject.props['buildApi']), "-DHOOK_MODULE_NAME=${hookModuleName}",
                        '-DMERGE_BUILD=' + rootProject.props['mergeBuild'],
                        '-DHOOK_LOG_LEVEL=' + (rootProject.props['logLevel']),
                        "-DMODULE_VERSION=${mVersionCode}",
                        "-DMODULE_VERSION_NAME=\"${mVersionName}\""
            }
        }
        buildConfigField 'String', 'HOOK_MODULE_NAME', "\"${hookModuleName}\""
        buildConfigField 'String', 'HOOK_HIGH_MODULE_NAME', "\"${highHookModuleName}\""
        buildConfigField 'String', 'HOOK_LOW_MODULE_NAME', "\"${lowHookModuleName}\""
        buildConfigField 'String', 'APP_TYPE', "\"${appType}\""

    }

    buildTypes {
        release {
            zipAlignEnabled true
            minifyEnabled true
            shrinkResources true
            proguardFiles 'proguard-rules.pro'
            if (rootProject.props['hasSign']) {
                signingConfig signingConfigs.sign
            }
        }
        debug {
            debuggable true
            minifyEnabled false
            shrinkResources false
            zipAlignEnabled true
            proguardFiles 'proguard-rules.pro'
            if (rootProject.props['hasSign']) {
                signingConfig signingConfigs.sign
            }
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
        }
    }
    packagingOptions {
        pickFirst '**/*.so'
    }
    buildToolsVersion '30.0.3'
    ndkVersion '24.0.8215888'
    applicationVariants.all { variant ->
        def buildType = variant.buildType.name
        variant.sourceSets.each {
            it.jniLibs.srcDirs = ["src/main/jniLibs/${buildType}"]
        }
        variant.outputs.all {
            outputFileName = "october-${buildType}-${mVersionName}-${appType}.apk"
        }
    }
}

tasks.whenTaskAdded { task ->
    if (task.name.startsWith('merge') && task.name.endsWith('JniLibFolders')) {
        task.doLast {
            it.outputs.files.files.each { File dir ->
                dir.eachDir {
                    if (appType == 'x86' && it.name.contains('arm')) {
                        println "delete app dir1 current fake-linker version module: ${it.absolutePath}"
                        it.deleteDir()
                    } else if (appType == 'arm' && it.name.contains('x86')) {
                        println "delete app dir2 current fake-linker version module: ${it.absolutePath}"
                        it.deleteDir()
                    }
                }
//                dir.eachFileRecurse {
//                    if (it.parentFile.name.contains('64') && !it.name.contains('64')) {
//                        println "delete current fake-linker version module: ${it.name}"
//                        it.delete()
//                    } else if (!it.parentFile.name.contains('64') && it.name.contains('64')) {
//                        println "delete current fake-linker version module: ${it.name}"
//                        it.delete()
//                    }
//                }
            }
        }
    } else if (name.startsWith('shrink')) {
        finalizedBy resOptimize
    }
}

task resOptimize {
    doLast {
        def aapt2 = Paths.get(project.android.sdkDirectory.path, "build-tools", project.android.buildToolsVersion, "aapt2")
        def zip = Paths.get(project.buildDir.path, "intermediates", "shrunk_processed_res", "release", "resources-release-stripped.ap_")
        if (!zip.toFile().exists()) {
            zip = Paths.get(project.buildDir.path, "intermediates", "shrunk_processed_res", "debug", "resources-debug-stripped.ap_")
        }
        def optimized = new File("${zip}.opt")
        def cmd = exec {
            commandLine(aapt2, "optimize", "--collapse-resource-names", "--shorten-resource-paths", "-o", optimized, zip)
            setIgnoreExitValue(true)
        }
        if (cmd.exitValue == 0) {
            zip.toFile().delete()
            optimized.renameTo(zip.toFile())
        }
    }
}


dependencies {
    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation 'com.google.android.material:material:1.6.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    implementation 'androidx.preference:preference:1.2.0'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.3.1'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.5.1'
    implementation 'com.alibaba:fastjson:1.2.83'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    compileOnly 'de.robv.android.xposed:api:82'
    compileOnly(project(':framework-compile'))
    implementation(project(':fake-linker'))
}